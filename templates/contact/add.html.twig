{% extends 'base.html.twig' %}
{% form_theme form 'bootstrap_5_layout.html.twig' %}

{% block title %}Ajouter un contact{% endblock %}

{% block body %}
    <h1>Ajouter un nouveau contact</h1>
    <h3 class="mt-3">Champs basiques</h3>
    {{ form_start(form, { attr: { novalidate: 'novalidate' }}) }}
        {{ form_row(form.firstName) }}
        {{ form_row(form.lastName) }}
        {{ form_row(form.phone) }}
        {{ form_row(form.email) }}
        <label>Photo (optionnel)</label>
        <div class="d-flex flex-column">
            <div>
                {# Aucune image de prévisualisation par défaut, mais nous allons permettre à l'utilisateur de télécharger une nouvelle photo #}
                <img id="photoPreview" class="rounded-circle" style="width: 50px; height: 50px; object-fit: cover; display: none;" />
            </div>
            <div class="mt-1">
                {# Champ photoFile pour ajouter une nouvelle photo #}
                {{ form_row(form.photoFile, {'attr': { 'onchange': 'previewPhoto(event)' }}) }}
            </div>
        </div>
        <div id="dynamic-fields">
            <h3>Champs personnalisés (optionnel)</h3>
            <div id="custom-fields" data-prototype="
                <div class='card mb-3'>
                    <div class='card-body'>
                        {{ form_widget(form.customFields.vars.prototype)|e('html_attr') }}
                    </div>
                    <div class='card-footer'>
                        <button type='button' class='btn btn-danger remove-field'>Supprimer</button>
                    </div>
                </div>
            ">
                {% for field in form.customFields %}
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="col">
                                {{ form_row(field.name) }}
                                {{ form_row(field.value) }}
                                {{ form_row(field.isDeleted) }}
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="button" class="btn btn-danger remove-field">Supprimer</button>
                        </div>
                    </div>
                {% endfor %}
            </div>
            <button type="button" id="add-custom-field" class="btn btn-primary mt-3 d-flex align-items-center">
                <span class="material-icons fs-5 me-2">add</span>
                Ajouter un champ
            </button>
        </div>
        
        {% if form.groups is not empty %}
            <h3 class="mt-3">Groupes (optionnel)</h3>
            {% for group in form.groups %}
                <div>
                    {{ form_widget(group) }}
                </div>
            {% endfor %}
        {% endif %}

        <h3 class="mt-3">Nouveaux Groupes (optionnel)</h3>
        {# Champs dynamiques pour nouveaux groupes #}
        <div id="new-groups-container" data-prototype="
            <div class='card mb-3'>
                <div class='card-body'>
                    {{ form_widget(form.newGroups.vars.prototype)|e('html_attr') }}
                </div>
                <div class='card-footer'>
                    <button type='button' class='btn btn-danger remove-group'>Supprimer</button>
                </div>
            </div>
        ">
            {% for newGroup in form.newGroups %}
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="col">
                                {{ form_row(newGroup) }}
                                {{ form_row(newGroup.isDeleted) }}
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="button" class="btn btn-danger remove-group">Supprimer</button>
                        </div>
                    </div>
                {% endfor %}
        </div>

        <button type="button" id="add-group" class="btn btn-primary mt-3 d-flex align-items-center">
            <span class="material-icons fs-5 me-2">add</span>
            Ajouter un groupe
        </button>
        
        <button class="btn btn-primary mt-5">Enregistrer le contact</button>
    {{ form_end(form) }}

    <a href="{{ path('app_contact_view') }}" class="btn btn-secondary mt-2 mb-2">Retour à la liste</a>

    <script>
        /* Preview de l'ancienne photo */
        function previewPhoto(event) {
            var file = event.target.files[0];
            var reader = new FileReader();

            reader.onload = function(e) {
                var photoPreview = document.getElementById('photoPreview');
                photoPreview.src = e.target.result;
                photoPreview.style.display = 'block';
            };

            if (file) {
                reader.readAsDataURL(file);
            }
        }

        /* Champs personnalisés */
        document.addEventListener("DOMContentLoaded", function () {
            const customFieldsContainer = document.querySelector("#custom-fields");
            const addButton = document.querySelector("#add-custom-field");
            let fieldIndex = customFieldsContainer.children.length;

            // Ajout d'un champ personnalisé
            addButton.addEventListener("click", function () {
                const prototype = customFieldsContainer.dataset.prototype;
                const newFieldHtml = prototype.replace(/__name__/g, fieldIndex);
                const newField = document.createElement("div");
                newField.innerHTML = newFieldHtml;
                customFieldsContainer.appendChild(newField);
                fieldIndex++;
            });

            // Suppression d'un champ personnalisé
            customFieldsContainer.addEventListener("click", function (e) {
                if (e.target.classList.contains("remove-field")) {
                    const fieldToRemove = e.target.closest(".card");
                    if (fieldToRemove) {
                        fieldToRemove.remove();
                    }
                }
            });

            // Suppression des fieldset qui sont invisibles et générés automatiquement par le formulaire
            const fieldsets = document.querySelectorAll('fieldset');
            fieldsets.forEach(function(fieldset) {
                fieldset.remove();
            });
        });

        /* Groupes */
        document.addEventListener("DOMContentLoaded", function () {
            const groupsContainer = document.querySelector("#new-groups-container");
            const addButton = document.querySelector("#add-group");
            let groupIndex = groupsContainer.children.length;

            // Ajout d'un nouveau groupe
            addButton.addEventListener("click", function () {
                const prototype = groupsContainer.dataset.prototype;
                const newGroupHtml = prototype.replace(/__name__/g, groupIndex);
                const newGroup = document.createElement("div");
                newGroup.innerHTML = newGroupHtml;
                groupsContainer.appendChild(newGroup);
                groupIndex++;
            });

            // Suppression d'un nouveau groupe
            groupsContainer.addEventListener("click", function (e) {
                if (e.target.classList.contains("remove-group")) {
                    const groupToRemove = e.target.closest(".card");
                    if (groupToRemove) {
                        groupToRemove.remove();
                    }
                }
            });
        });
    </script>
{% endblock %}